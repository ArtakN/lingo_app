/* 
---------------------------------------------------------------------------
Sets how the element is positioned relative to the browser window or other 
objects on the web page. The auxiliary properties left, right, top, and 
bottom control the position of the element, and the z-index controls the 
z-axis overlap

   position: static           default

The elements are displayed as usual. Using the left, top, right, bottom 
and z-index properties has no effect.

---------------------------------------------------------------------------

   position: relative

The position of an element is set relative to its original position in 
the code. Adding the left, top, right and bottom properties changes the 
position of the element and shifts it to one side or the other from its 
original position.

Each element can be either below or above the other objects on the web 
page, their z-axis placement is controlled by the z-index. This property 
works only for elements that have their position set to absolute, fixed, 
or relative.

   position: relative;
   top: 30px;
   left: 20px;
   z-index: 2;

the higher the z-index of the element the higher it stands on the z-axis

---------------------------------------------------------------------------

   posititon: absolute;

The element is supposedly ripped out of the code and hangs in the air. 
It stops affecting the other elements. Adding the properties left, top, 
right, and bottom changes the position of the element and shifts it to 
one side or the other relative to its parent with position: relative;

   .container {
      position: relative;
   }

   .block {
      position: absolute;
      top: 30px;
      left: 20px;
   }

if the element has several parents for example 
   body -> .main -> .container -> .block
we can positon the element relative to any parent
the same block we position relative to .main parent

   .main {
      position: relative;
   }

   .block {
      position: absolute;
      top: 30px;
      left: 20px;
   }

If any of parents doesn't have postiton:ralative, the element is positioned 
relative to the browser window.

   block {
      position: absolute;
      top: 30px;
      left: 20px;
   }

---------------------------------------------------------------------------

   position: fixed;

The element is supposedly ripped from the code and hangs in the air. 
Fixed, that is, it does not scroll with the content. It stops affecting 
the other elements. Adding the left, top, right and bottom properties 
changes the position of the element and shifts it to one side or the 
other relative to the browser window (viewport).

   .block {
      position: fixed;
      width: 100%;
      top: 0px;
      left: 0px;
   }
   
**************************************************************************
if after seting fixed posititon we will not write top: 0px; left: 0px; 
the element will disapeared or the content under it will get hidden 
behined fied element.
**************************************************************************

*** to set the fixed element on the viewport center we need to write 
    

   .pop-up{
      position: fixed;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      margin: auto;

      width: 280px;
      height: 150px;
   }

usually we will do it for pop-ups

---------------------------------------------------------------------------

   position: sticky;

Initially, the element behaves as static, but when the scroll reaches its 
border, it becomes fixed and sticks to the specified top or bottom position.

   .block {
      position: sticky;
      top: 0px;
   }

---------------------------------------------------------------------------

 z-index: 0;      The default z-index value for HTML elements is auto. 
                  This is similar to z-index: 0;
*/