/* grid it is the ultimate layout tool 

   flexbox was our first layout tool in CSS, 
   but flexbox has limitaitons
      -flexbox only deals with 1 dimension at a time
         if flex-diraction is row, we get colums 
         and can work only with horizontal dimenstion
         if flex-diraction is column, we get rows
         and can work with vertical dimenstion
         
   what if we wont to work with rows and columnes at the same time? 

   grid can soleve it, using grid we can work with horizontal 
   and vertical axis at the same time
   
   after we creating a grid 
      display: grid
   margins no longer collapse
   
   -----------------------------------------------------------------

   to propertly use css grid, we need to  define rows and columns
   
   any time we defining columns, we defining the with of the columns */
      grid-template-columns: 200px 200px 350px; 
   /* here the first column with is 200px, 2nd column with is 200 px,
      ant the 3rd column with is 350px  */

   /* any time we defining rows, we defining the hight of the rows */
      grid-template-rows: 50px 200px; 
   /* here the first row height is 50px and the 2nd row height is 200px */

   body {
      display: grid;
      /* 
      grid-template-row: 100px 400px; 
      grid-template-column: 250px 250px 250px;
      
      the same id*/
      grid-template: 100px 400px / 250px 250px 250px;
  }
/* ----------------------------------------------------------------------------------
   placing items on the grid  
   
   we can place items where we want them to be, with the following properties  

      grid-column-start
      grid-column-end
      grid-row-start
      grid-row-end

   columns and rows are seperated with lines, and all of these lines have numbers
   for example: we have a grid container, with 2 rows and 3 columns

      grid-template: 100px 100px / 250px 250px 250px; 
   
   it means that it has column-line numbers 
      1, 2, 3, 4  
      or   
      -4, -3, -2, -1    
   
   and row-line numbers
      1, 2, 3  
      or   
      -3, -2, -1    

   it is important, bacause to place grid items we are using these lines numbers

   for example. we want to change backround color of some
      background: green;
      grid-row-start: 1;
      grid-row-end: 3;
      grid-column-start: 2;
      grid-column-end: 3;
   it means that change background color from row lines 1-3, column lines 2-3

   it is uncomfort to write so many words, so it gives us shorthand

      .example {
         grid-column: start / end;
         grid-row: start / end;
      }

      if we want to chose from the begining to the end we can write
         grid-column: 1 / -1
         grid-row: 1 / 2

----------------------------------------------------------------------------------
spanning columns or rows  */

   .one {
       background: #B823C1;
       grid-column: span 2;  /* spanning first 2 columns */
       grid-row: span 2;
   }

   .one {
      background: #B823C1;
      grid-column: 2 / span 2;   /* this means spanning 2 columns from 2nd line */
      grid-row: 2 / span 3;
  }

/* ----------------------------------------------------------------------------------
   auto
   
   if we wnat to creat a grid not with exact height but to match the content */
   .grid {
      grid-template-rows: 50px auto;
      grid-template-columns: 200px 200px 200px;

      lign-items: start;   /* center, end, baseline - it works like flexbox  */
      justify-items: start; /* start, end, stretch - it works like flexbox  */
   }

   /* for 1 grid item */
  .item {
      align-self: start;   /* center, end - it works like flexbox  */
      justify-self: start;
  }

/* ----------------------------------------------------------------------------------
   grid gap - add gaps between rows and columns

      grid-row-gap: 2em;
      grid-column-gap   5em;
      
      or shorthand

      grid-gap: 2em 5em;

   *******************************************************************************
   gap only adding gaps between columns or rows and not outside (it is not margin)
   *******************************************************************************

   the implicit and explicit rows and columns

   when we declare display: grid; on an element, all the grid items are 
   automatically placed inside of a row, even if we haven't created any yet. 

   when we setup grid-template-columns and grid-template-rows, we are explicitly
   stating how big they must be.
   
   but sometimes columns and rows are created automatically. 
   these are implicit rows and columns.

   ----------------------------------------------------------------------------------
  
   grid-temlate-areas

   we can name grid areas  */

   main {
      dispaly: grid;
      grid-template-rows: 50px 200px;
      grid-template-column: 200px 200px 350px;
      grid-template-areas: 
                        "header header header"
                        "sidbar content content"       /*  so we have 6 areas */
      }

   /* it is very easy assign a grid item to a grid area!  */
   
      .main-content {
         grid-area: content;  /* and now the element with class="main-content"
                                 will be inside the area of content  */
      }

   ----------------------------------------------------------------------------------
   minmax() - seting a min-with an max-with with to template our columns and rows 

   using minmax() template become responsive

      minmax(100px, 300px)       // the first value is minimum, the second is maximum
      minmax(3em, 10em)
      minmax(200px, 50%)   */

      @media (min-width: 600px) {
         .grid {
            /* the second column with will be responsive */
            grid-template-columns: 100px minmax(200px, 1000px) 100px 100px;
            grid-template-areas: 
            "header header header header"
            ". content sidebar ."
            "footer footer footer footer";
         }
      }

   /* ----------------------------------------------------------------------------------
   
   fr unit - fraction of the available place
   
   using fr for a grid item, it become like a flex item, when it set flex: 1 1 auto;   
   
   it is the easiest way to create columns of equal size  */

   .grid {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;    /*  areas now are responsive, they are equal
                                                and take all the page with   */
    }

    /* we will use fr as ussual as we can, but not with minmax()
   
   ----------------------------------------------------------------------------------
   
   auto-fit and auto-fill  
   
   we use these to reapet insted of a set number of areas
   
   auto-fit will fit the columns into the available space

   auto-fill will keep adding in new columns, even if they are empty     */
   .portfolio {
      padding: 1em;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      grid-gap: 1em;
  } 
  
   